// Implementation file for parser generated by fsyacc
module TinyML.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open TinyML
open FSharp.Common.Parsing.LexYacc
open TinyML.Ast

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))


# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | FUN
  | ARROW
  | LET
  | REC
  | IN
  | TRUE
  | FALSE
  | BRA
  | KET
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | COLON
  | SEMICOLON2
  | COMMA
  | SEQUENCE
  | TO_FLOAT
  | TO_INT
  | PLUS_F
  | MINUS_F
  | STAR_F
  | SLASH_F
  | PERCENT_F
  | STRING of (System.String)
  | ID of (System.String)
  | CHAR of (System.Char)
  | FLOAT of (System.Double)
  | INT of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FUN
    | TOKEN_ARROW
    | TOKEN_LET
    | TOKEN_REC
    | TOKEN_IN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_PERCENT
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COLON
    | TOKEN_SEMICOLON2
    | TOKEN_COMMA
    | TOKEN_SEQUENCE
    | TOKEN_TO_FLOAT
    | TOKEN_TO_INT
    | TOKEN_PLUS_F
    | TOKEN_MINUS_F
    | TOKEN_STAR_F
    | TOKEN_SLASH_F
    | TOKEN_PERCENT_F
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_CHAR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startinteractive
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_interactive
    | NONTERM_expr
    | NONTERM_binding
    | NONTERM_expr_app_atom
    | NONTERM_expr_tuple_atom
    | NONTERM_ty
    | NONTERM_ty_tuple
    | NONTERM_expr_tuple_atoms
    | NONTERM_tuple_decompose_ids

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IF  -> 1 
  | THEN  -> 2 
  | ELSE  -> 3 
  | FUN  -> 4 
  | ARROW  -> 5 
  | LET  -> 6 
  | REC  -> 7 
  | IN  -> 8 
  | TRUE  -> 9 
  | FALSE  -> 10 
  | BRA  -> 11 
  | KET  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | STAR  -> 15 
  | SLASH  -> 16 
  | PERCENT  -> 17 
  | LT  -> 18 
  | GT  -> 19 
  | LEQ  -> 20 
  | GEQ  -> 21 
  | EQ  -> 22 
  | NEQ  -> 23 
  | AND  -> 24 
  | OR  -> 25 
  | NOT  -> 26 
  | COLON  -> 27 
  | SEMICOLON2  -> 28 
  | COMMA  -> 29 
  | SEQUENCE  -> 30 
  | TO_FLOAT  -> 31 
  | TO_INT  -> 32 
  | PLUS_F  -> 33 
  | MINUS_F  -> 34 
  | STAR_F  -> 35 
  | SLASH_F  -> 36 
  | PERCENT_F  -> 37 
  | STRING _ -> 38 
  | ID _ -> 39 
  | CHAR _ -> 40 
  | FLOAT _ -> 41 
  | INT _ -> 42 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_THEN 
  | 3 -> TOKEN_ELSE 
  | 4 -> TOKEN_FUN 
  | 5 -> TOKEN_ARROW 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_REC 
  | 8 -> TOKEN_IN 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_BRA 
  | 12 -> TOKEN_KET 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_STAR 
  | 16 -> TOKEN_SLASH 
  | 17 -> TOKEN_PERCENT 
  | 18 -> TOKEN_LT 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_LEQ 
  | 21 -> TOKEN_GEQ 
  | 22 -> TOKEN_EQ 
  | 23 -> TOKEN_NEQ 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_OR 
  | 26 -> TOKEN_NOT 
  | 27 -> TOKEN_COLON 
  | 28 -> TOKEN_SEMICOLON2 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_SEQUENCE 
  | 31 -> TOKEN_TO_FLOAT 
  | 32 -> TOKEN_TO_INT 
  | 33 -> TOKEN_PLUS_F 
  | 34 -> TOKEN_MINUS_F 
  | 35 -> TOKEN_STAR_F 
  | 36 -> TOKEN_SLASH_F 
  | 37 -> TOKEN_PERCENT_F 
  | 38 -> TOKEN_STRING 
  | 39 -> TOKEN_ID 
  | 40 -> TOKEN_CHAR 
  | 41 -> TOKEN_FLOAT 
  | 42 -> TOKEN_INT 
  | 45 -> TOKEN_end_of_input
  | 43 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startinteractive 
    | 1 -> NONTERM__startprogram 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_interactive 
    | 4 -> NONTERM_interactive 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_binding 
    | 8 -> NONTERM_binding 
    | 9 -> NONTERM_binding 
    | 10 -> NONTERM_binding 
    | 11 -> NONTERM_expr_app_atom 
    | 12 -> NONTERM_expr_app_atom 
    | 13 -> NONTERM_expr_app_atom 
    | 14 -> NONTERM_expr_app_atom 
    | 15 -> NONTERM_expr_app_atom 
    | 16 -> NONTERM_expr_app_atom 
    | 17 -> NONTERM_expr_app_atom 
    | 18 -> NONTERM_expr_app_atom 
    | 19 -> NONTERM_expr_app_atom 
    | 20 -> NONTERM_expr_app_atom 
    | 21 -> NONTERM_expr_app_atom 
    | 22 -> NONTERM_expr_tuple_atom 
    | 23 -> NONTERM_expr_tuple_atom 
    | 24 -> NONTERM_expr_tuple_atom 
    | 25 -> NONTERM_expr_tuple_atom 
    | 26 -> NONTERM_expr_tuple_atom 
    | 27 -> NONTERM_expr_tuple_atom 
    | 28 -> NONTERM_expr_tuple_atom 
    | 29 -> NONTERM_expr_tuple_atom 
    | 30 -> NONTERM_expr_tuple_atom 
    | 31 -> NONTERM_expr_tuple_atom 
    | 32 -> NONTERM_expr_tuple_atom 
    | 33 -> NONTERM_expr_tuple_atom 
    | 34 -> NONTERM_expr_tuple_atom 
    | 35 -> NONTERM_expr_tuple_atom 
    | 36 -> NONTERM_expr_tuple_atom 
    | 37 -> NONTERM_expr_tuple_atom 
    | 38 -> NONTERM_expr_tuple_atom 
    | 39 -> NONTERM_expr_tuple_atom 
    | 40 -> NONTERM_expr_tuple_atom 
    | 41 -> NONTERM_expr_tuple_atom 
    | 42 -> NONTERM_expr_tuple_atom 
    | 43 -> NONTERM_expr_tuple_atom 
    | 44 -> NONTERM_expr_tuple_atom 
    | 45 -> NONTERM_expr_tuple_atom 
    | 46 -> NONTERM_expr_tuple_atom 
    | 47 -> NONTERM_expr_tuple_atom 
    | 48 -> NONTERM_expr_tuple_atom 
    | 49 -> NONTERM_expr_tuple_atom 
    | 50 -> NONTERM_expr_tuple_atom 
    | 51 -> NONTERM_expr_tuple_atom 
    | 52 -> NONTERM_ty 
    | 53 -> NONTERM_ty 
    | 54 -> NONTERM_ty 
    | 55 -> NONTERM_ty 
    | 56 -> NONTERM_ty_tuple 
    | 57 -> NONTERM_ty_tuple 
    | 58 -> NONTERM_expr_tuple_atoms 
    | 59 -> NONTERM_expr_tuple_atoms 
    | 60 -> NONTERM_tuple_decompose_ids 
    | 61 -> NONTERM_tuple_decompose_ids 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 45 
let _fsyacc_tagOfErrorTerminal = 43

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FUN  -> "FUN" 
  | ARROW  -> "ARROW" 
  | LET  -> "LET" 
  | REC  -> "REC" 
  | IN  -> "IN" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | PERCENT  -> "PERCENT" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | COLON  -> "COLON" 
  | SEMICOLON2  -> "SEMICOLON2" 
  | COMMA  -> "COMMA" 
  | SEQUENCE  -> "SEQUENCE" 
  | TO_FLOAT  -> "TO_FLOAT" 
  | TO_INT  -> "TO_INT" 
  | PLUS_F  -> "PLUS_F" 
  | MINUS_F  -> "MINUS_F" 
  | STAR_F  -> "STAR_F" 
  | SLASH_F  -> "SLASH_F" 
  | PERCENT_F  -> "PERCENT_F" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | CHAR _ -> "CHAR" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON2  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEQUENCE  -> (null : System.Object) 
  | TO_FLOAT  -> (null : System.Object) 
  | TO_INT  -> (null : System.Object) 
  | PLUS_F  -> (null : System.Object) 
  | MINUS_F  -> (null : System.Object) 
  | STAR_F  -> (null : System.Object) 
  | SLASH_F  -> (null : System.Object) 
  | PERCENT_F  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 18us; 65535us; 0us; 6us; 2us; 4us; 12us; 41us; 18us; 19us; 22us; 23us; 26us; 27us; 30us; 31us; 38us; 41us; 44us; 45us; 48us; 49us; 78us; 79us; 85us; 86us; 88us; 89us; 95us; 96us; 97us; 98us; 120us; 121us; 122us; 123us; 124us; 125us; 42us; 65535us; 0us; 8us; 2us; 87us; 12us; 87us; 13us; 87us; 18us; 87us; 22us; 87us; 26us; 87us; 30us; 87us; 38us; 87us; 44us; 87us; 48us; 87us; 78us; 87us; 85us; 87us; 88us; 87us; 95us; 87us; 97us; 87us; 99us; 87us; 100us; 87us; 101us; 87us; 102us; 87us; 103us; 87us; 104us; 87us; 105us; 87us; 106us; 87us; 107us; 87us; 108us; 87us; 109us; 87us; 110us; 87us; 111us; 87us; 112us; 87us; 113us; 87us; 114us; 87us; 115us; 87us; 116us; 87us; 117us; 87us; 118us; 87us; 119us; 87us; 120us; 87us; 122us; 87us; 124us; 87us; 126us; 87us; 137us; 87us; 67us; 65535us; 0us; 51us; 2us; 51us; 10us; 75us; 11us; 75us; 12us; 51us; 13us; 51us; 18us; 51us; 22us; 51us; 26us; 51us; 30us; 51us; 38us; 51us; 44us; 51us; 48us; 51us; 52us; 75us; 53us; 75us; 54us; 75us; 55us; 75us; 56us; 75us; 57us; 75us; 58us; 75us; 59us; 75us; 60us; 75us; 61us; 75us; 62us; 75us; 63us; 75us; 64us; 75us; 65us; 75us; 66us; 75us; 67us; 75us; 68us; 75us; 69us; 75us; 70us; 75us; 71us; 75us; 72us; 75us; 73us; 75us; 74us; 75us; 78us; 51us; 85us; 51us; 88us; 51us; 95us; 51us; 97us; 51us; 99us; 51us; 100us; 51us; 101us; 51us; 102us; 51us; 103us; 51us; 104us; 51us; 105us; 51us; 106us; 51us; 107us; 51us; 108us; 51us; 109us; 51us; 110us; 51us; 111us; 51us; 112us; 51us; 113us; 51us; 114us; 51us; 115us; 51us; 116us; 51us; 117us; 51us; 118us; 51us; 119us; 51us; 120us; 51us; 122us; 51us; 124us; 51us; 126us; 51us; 137us; 51us; 42us; 65535us; 0us; 11us; 2us; 11us; 12us; 10us; 13us; 74us; 18us; 11us; 22us; 11us; 26us; 11us; 30us; 11us; 38us; 11us; 44us; 11us; 48us; 11us; 78us; 11us; 85us; 11us; 88us; 11us; 95us; 11us; 97us; 11us; 99us; 52us; 100us; 53us; 101us; 54us; 102us; 55us; 103us; 56us; 104us; 57us; 105us; 58us; 106us; 59us; 107us; 60us; 108us; 61us; 109us; 62us; 110us; 63us; 111us; 64us; 112us; 65us; 113us; 66us; 114us; 67us; 115us; 68us; 116us; 69us; 117us; 70us; 118us; 71us; 119us; 72us; 120us; 11us; 122us; 11us; 124us; 11us; 126us; 73us; 137us; 74us; 6us; 65535us; 20us; 21us; 28us; 29us; 82us; 83us; 131us; 128us; 134us; 129us; 136us; 130us; 6us; 65535us; 20us; 132us; 28us; 132us; 82us; 132us; 131us; 132us; 134us; 132us; 136us; 133us; 2us; 65535us; 13us; 14us; 137us; 138us; 2us; 65535us; 92us; 93us; 140us; 141us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 6us; 25us; 68us; 136us; 179us; 186us; 193us; 196us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 2us; 4us; 26us; 1us; 4us; 22us; 5us; 6us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 5us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 3us; 6us; 17us; 19us; 1us; 6us; 1us; 6us; 1us; 6us; 5us; 7us; 8us; 9us; 10us; 27us; 2us; 7us; 8us; 1us; 7us; 1us; 7us; 1us; 8us; 4us; 8us; 53us; 56us; 57us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 10us; 4us; 10us; 53us; 56us; 57us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 2us; 17us; 19us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 21us; 23us; 28us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 29us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 51us; 21us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 51us; 22us; 23us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 51us; 58us; 59us; 1us; 23us; 2us; 24us; 25us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 4us; 25us; 53us; 56us; 57us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 2us; 49us; 50us; 2us; 49us; 50us; 2us; 49us; 50us; 2us; 49us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 52us; 4us; 53us; 53us; 56us; 57us; 4us; 53us; 55us; 56us; 57us; 3us; 53us; 56us; 57us; 1us; 53us; 1us; 54us; 2us; 54us; 57us; 1us; 55us; 1us; 55us; 1us; 57us; 1us; 59us; 1us; 59us; 2us; 60us; 61us; 1us; 61us; 1us; 61us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 44us; 66us; 70us; 72us; 74us; 76us; 82us; 85us; 87us; 89us; 91us; 96us; 98us; 100us; 103us; 106us; 108us; 110us; 112us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 184us; 206us; 228us; 250us; 272us; 294us; 316us; 338us; 360us; 382us; 404us; 426us; 448us; 470us; 492us; 514us; 536us; 558us; 580us; 602us; 624us; 646us; 669us; 671us; 674us; 676us; 678us; 680us; 682us; 684us; 686us; 691us; 693us; 695us; 697us; 699us; 701us; 703us; 705us; 707us; 709us; 711us; 713us; 715us; 717us; 719us; 721us; 723us; 725us; 727us; 729us; 731us; 733us; 735us; 737us; 739us; 741us; 743us; 745us; 747us; 749us; 751us; 753us; 755us; 757us; 759us; 761us; 763us; 766us; 769us; 772us; 775us; 777us; 779us; 781us; 783us; 788us; 793us; 797us; 799us; 801us; 804us; 806us; 808us; 810us; 812us; 814us; 817us; 819us; |]
let _fsyacc_action_rows = 142
let _fsyacc_actionTableElements = [|16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 49152us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 49152us; 1us; 32768us; 0us; 5us; 0us; 16386us; 1us; 32768us; 28us; 7us; 0us; 16387us; 2us; 32768us; 8us; 88us; 28us; 9us; 0us; 16388us; 30us; 16389us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 24us; 118us; 25us; 119us; 29us; 13us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 29us; 16389us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 24us; 118us; 25us; 119us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 17us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 12us; 39us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 1us; 32768us; 12us; 15us; 0us; 16390us; 3us; 32768us; 7us; 24us; 11us; 90us; 39us; 17us; 2us; 32768us; 22us; 18us; 27us; 20us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16391us; 2us; 32768us; 11us; 134us; 39us; 127us; 3us; 16440us; 5us; 131us; 15us; 136us; 22us; 22us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16392us; 1us; 32768us; 39us; 25us; 2us; 32768us; 22us; 26us; 27us; 28us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16393us; 2us; 32768us; 11us; 134us; 39us; 127us; 3us; 16440us; 5us; 131us; 15us; 136us; 22us; 30us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 17us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 12us; 39us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16401us; 0us; 16402us; 1us; 32768us; 12us; 42us; 0us; 16403us; 1us; 32768us; 11us; 44us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 1us; 32768us; 12us; 46us; 0us; 16404us; 1us; 32768us; 11us; 48us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 1us; 32768us; 12us; 50us; 0us; 16405us; 0us; 16406us; 12us; 16412us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 12us; 16413us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 12us; 16414us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 19us; 16415us; 9us; 36us; 10us; 37us; 11us; 38us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 12us; 16416us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 19us; 16417us; 9us; 36us; 10us; 37us; 11us; 38us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 12us; 16418us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 17us; 16419us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 12us; 16420us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 17us; 16421us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 12us; 16422us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 29us; 16423us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 24us; 118us; 25us; 119us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 29us; 16424us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 24us; 118us; 25us; 119us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 21us; 16425us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 21us; 16426us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 21us; 16427us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 21us; 16428us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 21us; 16429us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 21us; 16430us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 27us; 16431us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 28us; 16432us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 24us; 118us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 16435us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 110us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 30us; 16442us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 102us; 14us; 104us; 15us; 106us; 16us; 108us; 17us; 110us; 18us; 114us; 19us; 115us; 20us; 116us; 21us; 117us; 22us; 112us; 23us; 113us; 24us; 118us; 25us; 119us; 29us; 137us; 30us; 126us; 31us; 43us; 32us; 47us; 33us; 103us; 34us; 105us; 35us; 107us; 36us; 109us; 37us; 111us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16407us; 2us; 32768us; 11us; 80us; 39us; 77us; 1us; 32768us; 5us; 78us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16408us; 1us; 32768us; 39us; 81us; 1us; 32768us; 27us; 82us; 2us; 32768us; 11us; 134us; 39us; 127us; 3us; 16440us; 5us; 131us; 12us; 84us; 15us; 136us; 1us; 32768us; 5us; 85us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16409us; 1us; 32768us; 8us; 88us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16410us; 1us; 32768us; 39us; 91us; 1us; 32768us; 29us; 92us; 1us; 32768us; 39us; 139us; 1us; 32768us; 12us; 94us; 1us; 32768us; 22us; 95us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 1us; 32768us; 8us; 97us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16411us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 1us; 32768us; 2us; 122us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 1us; 16433us; 3us; 124us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16434us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16436us; 2us; 16437us; 5us; 131us; 15us; 136us; 3us; 16440us; 5us; 131us; 12us; 135us; 15us; 136us; 2us; 16440us; 5us; 131us; 15us; 136us; 2us; 32768us; 11us; 134us; 39us; 127us; 0us; 16438us; 0us; 16438us; 2us; 32768us; 11us; 134us; 39us; 127us; 0us; 16439us; 2us; 32768us; 11us; 134us; 39us; 127us; 16us; 32768us; 1us; 120us; 4us; 76us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 100us; 26us; 99us; 31us; 43us; 32us; 47us; 34us; 101us; 38us; 34us; 39us; 40us; 40us; 35us; 41us; 33us; 42us; 32us; 0us; 16443us; 1us; 16444us; 29us; 140us; 1us; 32768us; 39us; 139us; 0us; 16445us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 35us; 36us; 38us; 39us; 41us; 42us; 45us; 46us; 77us; 107us; 125us; 142us; 144us; 145us; 149us; 152us; 169us; 170us; 173us; 177us; 194us; 195us; 197us; 200us; 217us; 218us; 221us; 225us; 242us; 243us; 244us; 245us; 246us; 247us; 248us; 249us; 267us; 268us; 269us; 271us; 272us; 274us; 291us; 293us; 294us; 296us; 313us; 315us; 316us; 317us; 330us; 343us; 356us; 376us; 389us; 409us; 422us; 440us; 453us; 471us; 484us; 514us; 544us; 566us; 588us; 610us; 632us; 654us; 676us; 704us; 733us; 750us; 781us; 782us; 785us; 787us; 804us; 805us; 807us; 809us; 812us; 816us; 818us; 835us; 836us; 838us; 855us; 856us; 858us; 860us; 862us; 864us; 866us; 883us; 885us; 902us; 903us; 920us; 937us; 954us; 971us; 988us; 1005us; 1022us; 1039us; 1056us; 1073us; 1090us; 1107us; 1124us; 1141us; 1158us; 1175us; 1192us; 1209us; 1226us; 1243us; 1260us; 1277us; 1279us; 1296us; 1298us; 1315us; 1316us; 1333us; 1334us; 1337us; 1341us; 1344us; 1347us; 1348us; 1349us; 1352us; 1353us; 1356us; 1373us; 1374us; 1376us; 1378us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 2us; 1us; 5us; 4us; 6us; 5us; 7us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 4us; 4us; 1us; 2us; 4us; 8us; 3us; 10us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 6us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 65535us; 16401us; 16402us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16434us; 65535us; 16436us; 65535us; 65535us; 65535us; 65535us; 16438us; 65535us; 65535us; 16439us; 65535us; 65535us; 16443us; 65535us; 65535us; 16445us; |]
let _fsyacc_reductions ()  =    [| 
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.interactive )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startinteractive));
# 404 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 413 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                              _1 
                   )
# 51 "Parser.fsy"
                 :  TinyML.Ast.expr ));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                               IExpr _1 
                   )
# 54 "Parser.fsy"
                 :  TinyML.Ast.interactive ));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                               IBinding _1 
                   )
# 55 "Parser.fsy"
                 :  TinyML.Ast.interactive ));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                                               _1 
                   )
# 58 "Parser.fsy"
                 : 'expr));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                               Tuple (_2::_4) 
                   )
# 59 "Parser.fsy"
                 : 'expr));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                (false, _2, None, _4) 
                   )
# 63 "Parser.fsy"
                 : 'binding));
# 481 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                (false, _2, Some _4, _6) 
                   )
# 64 "Parser.fsy"
                 : 'binding));
# 494 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                (true, _3, None, _5) 
                   )
# 65 "Parser.fsy"
                 : 'binding));
# 506 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                (true, _3, Some _5, _7) 
                   )
# 66 "Parser.fsy"
                 : 'binding));
# 519 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                               Lit (LInt _1) 
                   )
# 69 "Parser.fsy"
                 : 'expr_app_atom));
# 530 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                               Lit (LFloat _1) 
                   )
# 70 "Parser.fsy"
                 : 'expr_app_atom));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                               Lit (LString _1) 
                   )
# 71 "Parser.fsy"
                 : 'expr_app_atom));
# 552 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                               Lit (LChar _1) 
                   )
# 72 "Parser.fsy"
                 : 'expr_app_atom));
# 563 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                               Lit (LBool true) 
                   )
# 73 "Parser.fsy"
                 : 'expr_app_atom));
# 573 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                               Lit (LBool false) 
                   )
# 74 "Parser.fsy"
                 : 'expr_app_atom));
# 583 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                               Lit LUnit 
                   )
# 75 "Parser.fsy"
                 : 'expr_app_atom));
# 593 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                               Var _1 
                   )
# 77 "Parser.fsy"
                 : 'expr_app_atom));
# 604 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                               _2 
                   )
# 79 "Parser.fsy"
                 : 'expr_app_atom));
# 615 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                               UnOp ("to_float", _3) 
                   )
# 81 "Parser.fsy"
                 : 'expr_app_atom));
# 626 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                               UnOp ("to_int", _3) 
                   )
# 82 "Parser.fsy"
                 : 'expr_app_atom));
# 637 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                                               _1 
                   )
# 85 "Parser.fsy"
                 : 'expr_tuple_atom));
# 648 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                                               App (_1, _2) 
                   )
# 86 "Parser.fsy"
                 : 'expr_tuple_atom));
# 660 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                               Lambda (_2, None, _4) 
                   )
# 89 "Parser.fsy"
                 : 'expr_tuple_atom));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                                               Lambda (_3, Some _5, _8) 
                   )
# 90 "Parser.fsy"
                 : 'expr_tuple_atom));
# 685 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binding)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                                       LetIn (_1, _3) 
                   )
# 92 "Parser.fsy"
                 : 'expr_tuple_atom));
# 697 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuple_decompose_ids)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                                       LetTuple (_3::_5, _8, _10)
                   )
# 93 "Parser.fsy"
                 : 'expr_tuple_atom));
# 711 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                                               UnOp ("not", _2) 
                   )
# 95 "Parser.fsy"
                 : 'expr_tuple_atom));
# 722 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                               UnOp ("-", _2) 
                   )
# 96 "Parser.fsy"
                 : 'expr_tuple_atom));
# 733 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                               UnOp ("-.", _2) 
                   )
# 97 "Parser.fsy"
                 : 'expr_tuple_atom));
# 744 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                                               BinOp (_1, "+", _3) 
                   )
# 102 "Parser.fsy"
                 : 'expr_tuple_atom));
# 756 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                               BinOp (_1, "+.", _3) 
                   )
# 103 "Parser.fsy"
                 : 'expr_tuple_atom));
# 768 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                               BinOp (_1, "-", _3) 
                   )
# 104 "Parser.fsy"
                 : 'expr_tuple_atom));
# 780 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                                               BinOp (_1, "-.", _3) 
                   )
# 105 "Parser.fsy"
                 : 'expr_tuple_atom));
# 792 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                                               BinOp (_1, "*", _3) 
                   )
# 106 "Parser.fsy"
                 : 'expr_tuple_atom));
# 804 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                                               BinOp (_1, "*.", _3) 
                   )
# 107 "Parser.fsy"
                 : 'expr_tuple_atom));
# 816 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                               BinOp (_1, "/", _3) 
                   )
# 108 "Parser.fsy"
                 : 'expr_tuple_atom));
# 828 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                               BinOp (_1, "/.", _3) 
                   )
# 109 "Parser.fsy"
                 : 'expr_tuple_atom));
# 840 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                                               BinOp (_1, "%", _3) 
                   )
# 110 "Parser.fsy"
                 : 'expr_tuple_atom));
# 852 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                               BinOp (_1, "%.", _3) 
                   )
# 111 "Parser.fsy"
                 : 'expr_tuple_atom));
# 864 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                                               BinOp (_1, "=", _3) 
                   )
# 113 "Parser.fsy"
                 : 'expr_tuple_atom));
# 876 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                                               BinOp (_1, "<>", _3) 
                   )
# 114 "Parser.fsy"
                 : 'expr_tuple_atom));
# 888 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                               BinOp (_1, "<", _3) 
                   )
# 115 "Parser.fsy"
                 : 'expr_tuple_atom));
# 900 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                                               BinOp (_1, ">", _3) 
                   )
# 116 "Parser.fsy"
                 : 'expr_tuple_atom));
# 912 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                               BinOp (_1, "<=", _3) 
                   )
# 117 "Parser.fsy"
                 : 'expr_tuple_atom));
# 924 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                               BinOp (_1, ">=", _3) 
                   )
# 118 "Parser.fsy"
                 : 'expr_tuple_atom));
# 936 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                               BinOp (_1, "and", _3) 
                   )
# 119 "Parser.fsy"
                 : 'expr_tuple_atom));
# 948 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                               BinOp (_1, "or", _3) 
                   )
# 120 "Parser.fsy"
                 : 'expr_tuple_atom));
# 960 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                               IfThenElse (_2, _4, None) 
                   )
# 122 "Parser.fsy"
                 : 'expr_tuple_atom));
# 972 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                               IfThenElse (_2, _4, Some _6) 
                   )
# 123 "Parser.fsy"
                 : 'expr_tuple_atom));
# 985 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                               Seq (_1, _3) 
                   )
# 125 "Parser.fsy"
                 : 'expr_tuple_atom));
# 997 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                               TyName _1 
                   )
# 130 "Parser.fsy"
                 : 'ty));
# 1008 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                               TyArrow (_1, _3) 
                   )
# 131 "Parser.fsy"
                 : 'ty));
# 1020 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                               TyTuple _1 
                   )
# 132 "Parser.fsy"
                 : 'ty));
# 1031 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                               _2 
                   )
# 133 "Parser.fsy"
                 : 'ty));
# 1042 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                               [_1] 
                   )
# 136 "Parser.fsy"
                 : 'ty_tuple));
# 1053 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 137 "Parser.fsy"
                 : 'ty_tuple));
# 1065 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                       [_1] 
                   )
# 140 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 141 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 1088 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                               [_1] 
                   )
# 144 "Parser.fsy"
                 : 'tuple_decompose_ids));
# 1099 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuple_decompose_ids)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 145 "Parser.fsy"
                 : 'tuple_decompose_ids));
|]
# 1112 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 46;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let interactive lexer lexbuf :  TinyML.Ast.interactive  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let program lexer lexbuf :  TinyML.Ast.expr  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
