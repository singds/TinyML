// Implementation file for parser generated by fsyacc
module TinyML.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open TinyML
open FSharp.Common.Parsing.LexYacc
open TinyML.Ast

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))


# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | FUN
  | ARROW
  | LET
  | REC
  | IN
  | TRUE
  | FALSE
  | BRA
  | KET
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | AND
  | OR
  | NOT
  | COLON
  | SEMICOLON2
  | COMMA
  | SEQUENCE
  | TO_FLOAT
  | TO_INT
  | PLUS_F
  | MINUS_F
  | STAR_F
  | SLASH_F
  | PERCENT_F
  | BRASQ
  | KETSQ
  | CHAIN
  | ISEMPTY
  | MATCH
  | WITH
  | VSEP
  | STRING of (System.String)
  | ID of (System.String)
  | CHAR of (System.Char)
  | FLOAT of (System.Double)
  | INT of (System.Int32)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FUN
    | TOKEN_ARROW
    | TOKEN_LET
    | TOKEN_REC
    | TOKEN_IN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_PERCENT
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COLON
    | TOKEN_SEMICOLON2
    | TOKEN_COMMA
    | TOKEN_SEQUENCE
    | TOKEN_TO_FLOAT
    | TOKEN_TO_INT
    | TOKEN_PLUS_F
    | TOKEN_MINUS_F
    | TOKEN_STAR_F
    | TOKEN_SLASH_F
    | TOKEN_PERCENT_F
    | TOKEN_BRASQ
    | TOKEN_KETSQ
    | TOKEN_CHAIN
    | TOKEN_ISEMPTY
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_VSEP
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_CHAR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startinteractive
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_interactive
    | NONTERM_expr
    | NONTERM_binding
    | NONTERM_expr_app_atom
    | NONTERM_expr_tuple_atom
    | NONTERM_ty
    | NONTERM_ty_tuple
    | NONTERM_expr_tuple_atoms
    | NONTERM_tuple_decompose_ids

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IF  -> 1 
  | THEN  -> 2 
  | ELSE  -> 3 
  | FUN  -> 4 
  | ARROW  -> 5 
  | LET  -> 6 
  | REC  -> 7 
  | IN  -> 8 
  | TRUE  -> 9 
  | FALSE  -> 10 
  | BRA  -> 11 
  | KET  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | STAR  -> 15 
  | SLASH  -> 16 
  | PERCENT  -> 17 
  | LT  -> 18 
  | GT  -> 19 
  | LEQ  -> 20 
  | GEQ  -> 21 
  | EQ  -> 22 
  | NEQ  -> 23 
  | AND  -> 24 
  | OR  -> 25 
  | NOT  -> 26 
  | COLON  -> 27 
  | SEMICOLON2  -> 28 
  | COMMA  -> 29 
  | SEQUENCE  -> 30 
  | TO_FLOAT  -> 31 
  | TO_INT  -> 32 
  | PLUS_F  -> 33 
  | MINUS_F  -> 34 
  | STAR_F  -> 35 
  | SLASH_F  -> 36 
  | PERCENT_F  -> 37 
  | BRASQ  -> 38 
  | KETSQ  -> 39 
  | CHAIN  -> 40 
  | ISEMPTY  -> 41 
  | MATCH  -> 42 
  | WITH  -> 43 
  | VSEP  -> 44 
  | STRING _ -> 45 
  | ID _ -> 46 
  | CHAR _ -> 47 
  | FLOAT _ -> 48 
  | INT _ -> 49 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_THEN 
  | 3 -> TOKEN_ELSE 
  | 4 -> TOKEN_FUN 
  | 5 -> TOKEN_ARROW 
  | 6 -> TOKEN_LET 
  | 7 -> TOKEN_REC 
  | 8 -> TOKEN_IN 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_BRA 
  | 12 -> TOKEN_KET 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_STAR 
  | 16 -> TOKEN_SLASH 
  | 17 -> TOKEN_PERCENT 
  | 18 -> TOKEN_LT 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_LEQ 
  | 21 -> TOKEN_GEQ 
  | 22 -> TOKEN_EQ 
  | 23 -> TOKEN_NEQ 
  | 24 -> TOKEN_AND 
  | 25 -> TOKEN_OR 
  | 26 -> TOKEN_NOT 
  | 27 -> TOKEN_COLON 
  | 28 -> TOKEN_SEMICOLON2 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_SEQUENCE 
  | 31 -> TOKEN_TO_FLOAT 
  | 32 -> TOKEN_TO_INT 
  | 33 -> TOKEN_PLUS_F 
  | 34 -> TOKEN_MINUS_F 
  | 35 -> TOKEN_STAR_F 
  | 36 -> TOKEN_SLASH_F 
  | 37 -> TOKEN_PERCENT_F 
  | 38 -> TOKEN_BRASQ 
  | 39 -> TOKEN_KETSQ 
  | 40 -> TOKEN_CHAIN 
  | 41 -> TOKEN_ISEMPTY 
  | 42 -> TOKEN_MATCH 
  | 43 -> TOKEN_WITH 
  | 44 -> TOKEN_VSEP 
  | 45 -> TOKEN_STRING 
  | 46 -> TOKEN_ID 
  | 47 -> TOKEN_CHAR 
  | 48 -> TOKEN_FLOAT 
  | 49 -> TOKEN_INT 
  | 52 -> TOKEN_end_of_input
  | 50 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startinteractive 
    | 1 -> NONTERM__startprogram 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_interactive 
    | 4 -> NONTERM_interactive 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_binding 
    | 8 -> NONTERM_binding 
    | 9 -> NONTERM_binding 
    | 10 -> NONTERM_binding 
    | 11 -> NONTERM_expr_app_atom 
    | 12 -> NONTERM_expr_app_atom 
    | 13 -> NONTERM_expr_app_atom 
    | 14 -> NONTERM_expr_app_atom 
    | 15 -> NONTERM_expr_app_atom 
    | 16 -> NONTERM_expr_app_atom 
    | 17 -> NONTERM_expr_app_atom 
    | 18 -> NONTERM_expr_app_atom 
    | 19 -> NONTERM_expr_app_atom 
    | 20 -> NONTERM_expr_app_atom 
    | 21 -> NONTERM_expr_app_atom 
    | 22 -> NONTERM_expr_app_atom 
    | 23 -> NONTERM_expr_app_atom 
    | 24 -> NONTERM_expr_tuple_atom 
    | 25 -> NONTERM_expr_tuple_atom 
    | 26 -> NONTERM_expr_tuple_atom 
    | 27 -> NONTERM_expr_tuple_atom 
    | 28 -> NONTERM_expr_tuple_atom 
    | 29 -> NONTERM_expr_tuple_atom 
    | 30 -> NONTERM_expr_tuple_atom 
    | 31 -> NONTERM_expr_tuple_atom 
    | 32 -> NONTERM_expr_tuple_atom 
    | 33 -> NONTERM_expr_tuple_atom 
    | 34 -> NONTERM_expr_tuple_atom 
    | 35 -> NONTERM_expr_tuple_atom 
    | 36 -> NONTERM_expr_tuple_atom 
    | 37 -> NONTERM_expr_tuple_atom 
    | 38 -> NONTERM_expr_tuple_atom 
    | 39 -> NONTERM_expr_tuple_atom 
    | 40 -> NONTERM_expr_tuple_atom 
    | 41 -> NONTERM_expr_tuple_atom 
    | 42 -> NONTERM_expr_tuple_atom 
    | 43 -> NONTERM_expr_tuple_atom 
    | 44 -> NONTERM_expr_tuple_atom 
    | 45 -> NONTERM_expr_tuple_atom 
    | 46 -> NONTERM_expr_tuple_atom 
    | 47 -> NONTERM_expr_tuple_atom 
    | 48 -> NONTERM_expr_tuple_atom 
    | 49 -> NONTERM_expr_tuple_atom 
    | 50 -> NONTERM_expr_tuple_atom 
    | 51 -> NONTERM_expr_tuple_atom 
    | 52 -> NONTERM_expr_tuple_atom 
    | 53 -> NONTERM_expr_tuple_atom 
    | 54 -> NONTERM_expr_tuple_atom 
    | 55 -> NONTERM_expr_tuple_atom 
    | 56 -> NONTERM_expr_tuple_atom 
    | 57 -> NONTERM_ty 
    | 58 -> NONTERM_ty 
    | 59 -> NONTERM_ty 
    | 60 -> NONTERM_ty 
    | 61 -> NONTERM_ty_tuple 
    | 62 -> NONTERM_ty_tuple 
    | 63 -> NONTERM_expr_tuple_atoms 
    | 64 -> NONTERM_expr_tuple_atoms 
    | 65 -> NONTERM_tuple_decompose_ids 
    | 66 -> NONTERM_tuple_decompose_ids 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 52 
let _fsyacc_tagOfErrorTerminal = 50

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | FUN  -> "FUN" 
  | ARROW  -> "ARROW" 
  | LET  -> "LET" 
  | REC  -> "REC" 
  | IN  -> "IN" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | STAR  -> "STAR" 
  | SLASH  -> "SLASH" 
  | PERCENT  -> "PERCENT" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | COLON  -> "COLON" 
  | SEMICOLON2  -> "SEMICOLON2" 
  | COMMA  -> "COMMA" 
  | SEQUENCE  -> "SEQUENCE" 
  | TO_FLOAT  -> "TO_FLOAT" 
  | TO_INT  -> "TO_INT" 
  | PLUS_F  -> "PLUS_F" 
  | MINUS_F  -> "MINUS_F" 
  | STAR_F  -> "STAR_F" 
  | SLASH_F  -> "SLASH_F" 
  | PERCENT_F  -> "PERCENT_F" 
  | BRASQ  -> "BRASQ" 
  | KETSQ  -> "KETSQ" 
  | CHAIN  -> "CHAIN" 
  | ISEMPTY  -> "ISEMPTY" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | VSEP  -> "VSEP" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | CHAR _ -> "CHAR" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON2  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEQUENCE  -> (null : System.Object) 
  | TO_FLOAT  -> (null : System.Object) 
  | TO_INT  -> (null : System.Object) 
  | PLUS_F  -> (null : System.Object) 
  | MINUS_F  -> (null : System.Object) 
  | STAR_F  -> (null : System.Object) 
  | SLASH_F  -> (null : System.Object) 
  | PERCENT_F  -> (null : System.Object) 
  | BRASQ  -> (null : System.Object) 
  | KETSQ  -> (null : System.Object) 
  | CHAIN  -> (null : System.Object) 
  | ISEMPTY  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | VSEP  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 2us; 3us; 1us; 65535us; 0us; 1us; 20us; 65535us; 0us; 6us; 2us; 4us; 12us; 41us; 18us; 19us; 22us; 23us; 26us; 27us; 30us; 31us; 38us; 41us; 44us; 45us; 48us; 49us; 84us; 85us; 91us; 92us; 94us; 95us; 101us; 102us; 103us; 104us; 126us; 127us; 128us; 129us; 130us; 131us; 141us; 142us; 146us; 147us; 46us; 65535us; 0us; 8us; 2us; 93us; 12us; 93us; 13us; 93us; 18us; 93us; 22us; 93us; 26us; 93us; 30us; 93us; 38us; 93us; 44us; 93us; 48us; 93us; 84us; 93us; 91us; 93us; 94us; 93us; 101us; 93us; 103us; 93us; 105us; 93us; 106us; 93us; 107us; 93us; 108us; 93us; 109us; 93us; 110us; 93us; 111us; 93us; 112us; 93us; 113us; 93us; 114us; 93us; 115us; 93us; 116us; 93us; 117us; 93us; 118us; 93us; 119us; 93us; 120us; 93us; 121us; 93us; 122us; 93us; 123us; 93us; 124us; 93us; 125us; 93us; 126us; 93us; 128us; 93us; 130us; 93us; 132us; 93us; 135us; 93us; 136us; 93us; 141us; 93us; 146us; 93us; 158us; 93us; 74us; 65535us; 0us; 55us; 2us; 55us; 10us; 81us; 11us; 81us; 12us; 55us; 13us; 55us; 18us; 55us; 22us; 55us; 26us; 55us; 30us; 55us; 38us; 55us; 44us; 55us; 48us; 55us; 56us; 81us; 57us; 81us; 58us; 81us; 59us; 81us; 60us; 81us; 61us; 81us; 62us; 81us; 63us; 81us; 64us; 81us; 65us; 81us; 66us; 81us; 67us; 81us; 68us; 81us; 69us; 81us; 70us; 81us; 71us; 81us; 72us; 81us; 73us; 81us; 74us; 81us; 75us; 81us; 76us; 81us; 77us; 81us; 78us; 81us; 79us; 81us; 80us; 81us; 84us; 55us; 91us; 55us; 94us; 55us; 101us; 55us; 103us; 55us; 105us; 55us; 106us; 55us; 107us; 55us; 108us; 55us; 109us; 55us; 110us; 55us; 111us; 55us; 112us; 55us; 113us; 55us; 114us; 55us; 115us; 55us; 116us; 55us; 117us; 55us; 118us; 55us; 119us; 55us; 120us; 55us; 121us; 55us; 122us; 55us; 123us; 55us; 124us; 55us; 125us; 55us; 126us; 55us; 128us; 55us; 130us; 55us; 132us; 55us; 133us; 134us; 135us; 55us; 136us; 55us; 141us; 55us; 146us; 55us; 158us; 55us; 46us; 65535us; 0us; 11us; 2us; 11us; 12us; 10us; 13us; 80us; 18us; 11us; 22us; 11us; 26us; 11us; 30us; 11us; 38us; 11us; 44us; 11us; 48us; 11us; 84us; 11us; 91us; 11us; 94us; 11us; 101us; 11us; 103us; 11us; 105us; 56us; 106us; 57us; 107us; 58us; 108us; 59us; 109us; 60us; 110us; 61us; 111us; 62us; 112us; 63us; 113us; 64us; 114us; 65us; 115us; 66us; 116us; 67us; 117us; 68us; 118us; 69us; 119us; 70us; 120us; 71us; 121us; 72us; 122us; 73us; 123us; 74us; 124us; 75us; 125us; 76us; 126us; 11us; 128us; 11us; 130us; 11us; 132us; 77us; 135us; 78us; 136us; 79us; 141us; 11us; 146us; 11us; 158us; 80us; 7us; 65535us; 20us; 21us; 28us; 29us; 51us; 52us; 88us; 89us; 152us; 149us; 155us; 150us; 157us; 151us; 7us; 65535us; 20us; 153us; 28us; 153us; 51us; 153us; 88us; 153us; 152us; 153us; 155us; 153us; 157us; 154us; 2us; 65535us; 13us; 14us; 158us; 159us; 2us; 65535us; 98us; 99us; 161us; 162us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 6us; 27us; 74us; 149us; 196us; 204us; 212us; 215us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 2us; 4us; 28us; 1us; 4us; 23us; 5us; 6us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 5us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 3us; 6us; 17us; 19us; 1us; 6us; 1us; 6us; 1us; 6us; 5us; 7us; 8us; 9us; 10us; 29us; 2us; 7us; 8us; 1us; 7us; 1us; 7us; 1us; 8us; 4us; 8us; 58us; 61us; 62us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 10us; 4us; 10us; 58us; 61us; 62us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 2us; 17us; 19us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 2us; 22us; 23us; 4us; 22us; 58us; 61us; 62us; 1us; 22us; 1us; 23us; 1us; 24us; 22us; 25us; 30us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 31us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 53us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 55us; 22us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 56us; 23us; 25us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 53us; 55us; 63us; 64us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 4us; 27us; 58us; 61us; 62us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 2us; 51us; 52us; 2us; 51us; 52us; 2us; 51us; 52us; 2us; 51us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 4us; 58us; 58us; 61us; 62us; 4us; 58us; 60us; 61us; 62us; 3us; 58us; 61us; 62us; 1us; 58us; 1us; 59us; 2us; 59us; 62us; 1us; 60us; 1us; 60us; 1us; 62us; 1us; 64us; 1us; 64us; 2us; 65us; 66us; 1us; 66us; 1us; 66us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 19us; 21us; 45us; 68us; 72us; 74us; 76us; 78us; 84us; 87us; 89us; 91us; 93us; 98us; 100us; 102us; 105us; 108us; 110us; 112us; 114us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 165us; 170us; 172us; 174us; 176us; 199us; 222us; 245us; 268us; 291us; 314us; 337us; 360us; 383us; 406us; 429us; 452us; 475us; 498us; 521us; 544us; 567us; 590us; 613us; 636us; 659us; 682us; 705us; 728us; 752us; 754us; 757us; 759us; 761us; 763us; 765us; 767us; 769us; 774us; 776us; 778us; 780us; 782us; 784us; 786us; 788us; 790us; 792us; 794us; 796us; 798us; 800us; 802us; 804us; 806us; 808us; 810us; 812us; 814us; 816us; 818us; 820us; 822us; 824us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 849us; 852us; 855us; 858us; 860us; 862us; 864us; 866us; 868us; 870us; 872us; 874us; 876us; 878us; 880us; 882us; 884us; 886us; 888us; 890us; 892us; 894us; 896us; 901us; 906us; 910us; 912us; 914us; 917us; 919us; 921us; 923us; 925us; 927us; 930us; 932us; |]
let _fsyacc_action_rows = 163
let _fsyacc_actionTableElements = [|19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 49152us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 49152us; 1us; 32768us; 0us; 5us; 0us; 16386us; 1us; 32768us; 28us; 7us; 0us; 16387us; 2us; 32768us; 8us; 94us; 28us; 9us; 0us; 16388us; 32us; 16389us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 29us; 13us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 31us; 16389us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 20us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 12us; 39us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 12us; 15us; 0us; 16390us; 3us; 32768us; 7us; 24us; 11us; 96us; 46us; 17us; 2us; 32768us; 22us; 18us; 27us; 20us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16391us; 2us; 32768us; 11us; 155us; 46us; 148us; 3us; 16445us; 5us; 152us; 15us; 157us; 22us; 22us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16392us; 1us; 32768us; 46us; 25us; 2us; 32768us; 22us; 26us; 27us; 28us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16393us; 2us; 32768us; 11us; 155us; 46us; 148us; 3us; 16445us; 5us; 152us; 15us; 157us; 22us; 30us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 20us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 12us; 39us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16401us; 0us; 16402us; 1us; 32768us; 12us; 42us; 0us; 16403us; 1us; 32768us; 11us; 44us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 12us; 46us; 0us; 16404us; 1us; 32768us; 11us; 48us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 12us; 50us; 0us; 16405us; 3us; 32768us; 11us; 155us; 39us; 54us; 46us; 148us; 3us; 16445us; 5us; 152us; 15us; 157us; 39us; 53us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 14us; 16414us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 14us; 16415us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 14us; 16416us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 21us; 16417us; 9us; 36us; 10us; 37us; 11us; 38us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 14us; 16418us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 21us; 16419us; 9us; 36us; 10us; 37us; 11us; 38us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 14us; 16420us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 16421us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 14us; 16422us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 16423us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 14us; 16424us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 31us; 16425us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 31us; 16426us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 23us; 16427us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 23us; 16428us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 23us; 16429us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 23us; 16430us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 23us; 16431us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 23us; 16432us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 29us; 16433us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 30us; 16434us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 18us; 16437us; 9us; 36us; 10us; 37us; 11us; 38us; 17us; 116us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 31us; 16439us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 32us; 32768us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 43us; 137us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 32us; 16447us; 9us; 36us; 10us; 37us; 11us; 38us; 13us; 108us; 14us; 110us; 15us; 112us; 16us; 114us; 17us; 116us; 18us; 120us; 19us; 121us; 20us; 122us; 21us; 123us; 22us; 118us; 23us; 119us; 24us; 124us; 25us; 125us; 29us; 158us; 30us; 132us; 31us; 43us; 32us; 47us; 33us; 109us; 34us; 111us; 35us; 113us; 36us; 115us; 37us; 117us; 38us; 51us; 40us; 135us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16409us; 2us; 32768us; 11us; 86us; 46us; 83us; 1us; 32768us; 5us; 84us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16410us; 1us; 32768us; 46us; 87us; 1us; 32768us; 27us; 88us; 2us; 32768us; 11us; 155us; 46us; 148us; 3us; 16445us; 5us; 152us; 12us; 90us; 15us; 157us; 1us; 32768us; 5us; 91us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16411us; 1us; 32768us; 8us; 94us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16412us; 1us; 32768us; 46us; 97us; 1us; 32768us; 29us; 98us; 1us; 32768us; 46us; 160us; 1us; 32768us; 12us; 100us; 1us; 32768us; 22us; 101us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 8us; 103us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16413us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 2us; 128us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 16435us; 3us; 130us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16436us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 11us; 32768us; 9us; 36us; 10us; 37us; 11us; 38us; 31us; 43us; 32us; 47us; 38us; 51us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16438us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 46us; 138us; 1us; 32768us; 40us; 139us; 1us; 32768us; 46us; 140us; 1us; 32768us; 5us; 141us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 1us; 32768us; 44us; 143us; 1us; 32768us; 38us; 144us; 1us; 32768us; 39us; 145us; 1us; 32768us; 5us; 146us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 12us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16440us; 0us; 16441us; 2us; 16442us; 5us; 152us; 15us; 157us; 3us; 16445us; 5us; 152us; 12us; 156us; 15us; 157us; 2us; 16445us; 5us; 152us; 15us; 157us; 2us; 32768us; 11us; 155us; 46us; 148us; 0us; 16443us; 0us; 16443us; 2us; 32768us; 11us; 155us; 46us; 148us; 0us; 16444us; 2us; 32768us; 11us; 155us; 46us; 148us; 19us; 32768us; 1us; 126us; 4us; 82us; 6us; 16us; 9us; 36us; 10us; 37us; 11us; 38us; 14us; 106us; 26us; 105us; 31us; 43us; 32us; 47us; 34us; 107us; 38us; 51us; 41us; 133us; 42us; 136us; 45us; 34us; 46us; 40us; 47us; 35us; 48us; 33us; 49us; 32us; 0us; 16448us; 1us; 16449us; 29us; 161us; 1us; 32768us; 46us; 160us; 0us; 16450us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 20us; 21us; 41us; 42us; 44us; 45us; 47us; 48us; 51us; 52us; 85us; 117us; 138us; 158us; 160us; 161us; 165us; 168us; 188us; 189us; 192us; 196us; 216us; 217us; 219us; 222us; 242us; 243us; 246us; 250us; 270us; 271us; 272us; 273us; 274us; 275us; 276us; 277us; 298us; 299us; 300us; 302us; 303us; 305us; 325us; 327us; 328us; 330us; 350us; 352us; 353us; 357us; 361us; 362us; 363us; 364us; 379us; 394us; 409us; 431us; 446us; 468us; 483us; 503us; 518us; 538us; 553us; 585us; 617us; 641us; 665us; 689us; 713us; 737us; 761us; 791us; 822us; 841us; 873us; 906us; 939us; 940us; 943us; 945us; 965us; 966us; 968us; 970us; 973us; 977us; 979us; 999us; 1000us; 1002us; 1022us; 1023us; 1025us; 1027us; 1029us; 1031us; 1033us; 1053us; 1055us; 1075us; 1076us; 1096us; 1116us; 1136us; 1156us; 1176us; 1196us; 1216us; 1236us; 1256us; 1276us; 1296us; 1316us; 1336us; 1356us; 1376us; 1396us; 1416us; 1436us; 1456us; 1476us; 1496us; 1516us; 1518us; 1538us; 1540us; 1560us; 1561us; 1581us; 1593us; 1594us; 1614us; 1634us; 1636us; 1638us; 1640us; 1642us; 1662us; 1664us; 1666us; 1668us; 1670us; 1690us; 1691us; 1692us; 1695us; 1699us; 1702us; 1705us; 1706us; 1707us; 1710us; 1711us; 1714us; 1734us; 1735us; 1737us; 1739us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 2us; 2us; 1us; 5us; 4us; 6us; 5us; 7us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 4us; 4us; 3us; 2us; 1us; 2us; 4us; 8us; 3us; 10us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 6us; 3us; 2us; 3us; 13us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 16400us; 65535us; 16401us; 16402us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 16407us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 16441us; 65535us; 65535us; 65535us; 65535us; 16443us; 65535us; 65535us; 16444us; 65535us; 65535us; 16448us; 65535us; 65535us; 16450us; |]
let _fsyacc_reductions ()  =    [| 
# 442 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.interactive )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startinteractive));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  TinyML.Ast.expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 460 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                              _1 
                   )
# 52 "Parser.fsy"
                 :  TinyML.Ast.expr ));
# 471 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                               IExpr _1 
                   )
# 55 "Parser.fsy"
                 :  TinyML.Ast.interactive ));
# 482 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binding)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                               IBinding _1 
                   )
# 56 "Parser.fsy"
                 :  TinyML.Ast.interactive ));
# 493 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                               _1 
                   )
# 59 "Parser.fsy"
                 : 'expr));
# 504 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                               Tuple (_2::_4) 
                   )
# 60 "Parser.fsy"
                 : 'expr));
# 516 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                (false, _2, None, _4) 
                   )
# 64 "Parser.fsy"
                 : 'binding));
# 528 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                (false, _2, Some _4, _6) 
                   )
# 65 "Parser.fsy"
                 : 'binding));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                (true, _3, None, _5) 
                   )
# 66 "Parser.fsy"
                 : 'binding));
# 553 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                (true, _3, Some _5, _7) 
                   )
# 67 "Parser.fsy"
                 : 'binding));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                               Lit (LInt _1) 
                   )
# 70 "Parser.fsy"
                 : 'expr_app_atom));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                               Lit (LFloat _1) 
                   )
# 71 "Parser.fsy"
                 : 'expr_app_atom));
# 588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                               Lit (LString _1) 
                   )
# 72 "Parser.fsy"
                 : 'expr_app_atom));
# 599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                               Lit (LChar _1) 
                   )
# 73 "Parser.fsy"
                 : 'expr_app_atom));
# 610 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                               Lit (LBool true) 
                   )
# 74 "Parser.fsy"
                 : 'expr_app_atom));
# 620 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                               Lit (LBool false) 
                   )
# 75 "Parser.fsy"
                 : 'expr_app_atom));
# 630 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                               Lit LUnit 
                   )
# 76 "Parser.fsy"
                 : 'expr_app_atom));
# 640 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                               Var _1 
                   )
# 78 "Parser.fsy"
                 : 'expr_app_atom));
# 651 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                               _2 
                   )
# 80 "Parser.fsy"
                 : 'expr_app_atom));
# 662 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                               UnOp ("to_float", _3) 
                   )
# 82 "Parser.fsy"
                 : 'expr_app_atom));
# 673 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                               UnOp ("to_int", _3) 
                   )
# 83 "Parser.fsy"
                 : 'expr_app_atom));
# 684 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                               Empty (Some _2) 
                   )
# 85 "Parser.fsy"
                 : 'expr_app_atom));
# 695 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                               Empty (None) 
                   )
# 86 "Parser.fsy"
                 : 'expr_app_atom));
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                               _1 
                   )
# 89 "Parser.fsy"
                 : 'expr_tuple_atom));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                                               App (_1, _2) 
                   )
# 90 "Parser.fsy"
                 : 'expr_tuple_atom));
# 728 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                               Lambda (_2, None, _4) 
                   )
# 93 "Parser.fsy"
                 : 'expr_tuple_atom));
# 740 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                               Lambda (_3, Some _5, _8) 
                   )
# 94 "Parser.fsy"
                 : 'expr_tuple_atom));
# 753 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'binding)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                                                       LetIn (_1, _3) 
                   )
# 96 "Parser.fsy"
                 : 'expr_tuple_atom));
# 765 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuple_decompose_ids)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                                       LetTuple (_3::_5, _8, _10)
                   )
# 97 "Parser.fsy"
                 : 'expr_tuple_atom));
# 779 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                               UnOp ("not", _2) 
                   )
# 99 "Parser.fsy"
                 : 'expr_tuple_atom));
# 790 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                                               UnOp ("-", _2) 
                   )
# 100 "Parser.fsy"
                 : 'expr_tuple_atom));
# 801 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                                               UnOp ("-.", _2) 
                   )
# 101 "Parser.fsy"
                 : 'expr_tuple_atom));
# 812 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                                               BinOp (_1, "+", _3) 
                   )
# 106 "Parser.fsy"
                 : 'expr_tuple_atom));
# 824 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                                               BinOp (_1, "+.", _3) 
                   )
# 107 "Parser.fsy"
                 : 'expr_tuple_atom));
# 836 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                               BinOp (_1, "-", _3) 
                   )
# 108 "Parser.fsy"
                 : 'expr_tuple_atom));
# 848 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                               BinOp (_1, "-.", _3) 
                   )
# 109 "Parser.fsy"
                 : 'expr_tuple_atom));
# 860 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                                               BinOp (_1, "*", _3) 
                   )
# 110 "Parser.fsy"
                 : 'expr_tuple_atom));
# 872 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                               BinOp (_1, "*.", _3) 
                   )
# 111 "Parser.fsy"
                 : 'expr_tuple_atom));
# 884 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                                               BinOp (_1, "/", _3) 
                   )
# 112 "Parser.fsy"
                 : 'expr_tuple_atom));
# 896 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                                               BinOp (_1, "/.", _3) 
                   )
# 113 "Parser.fsy"
                 : 'expr_tuple_atom));
# 908 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                                               BinOp (_1, "%", _3) 
                   )
# 114 "Parser.fsy"
                 : 'expr_tuple_atom));
# 920 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                               BinOp (_1, "%.", _3) 
                   )
# 115 "Parser.fsy"
                 : 'expr_tuple_atom));
# 932 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                               BinOp (_1, "=", _3) 
                   )
# 117 "Parser.fsy"
                 : 'expr_tuple_atom));
# 944 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                               BinOp (_1, "<>", _3) 
                   )
# 118 "Parser.fsy"
                 : 'expr_tuple_atom));
# 956 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                               BinOp (_1, "<", _3) 
                   )
# 119 "Parser.fsy"
                 : 'expr_tuple_atom));
# 968 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                               BinOp (_1, ">", _3) 
                   )
# 120 "Parser.fsy"
                 : 'expr_tuple_atom));
# 980 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                               BinOp (_1, "<=", _3) 
                   )
# 121 "Parser.fsy"
                 : 'expr_tuple_atom));
# 992 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                               BinOp (_1, ">=", _3) 
                   )
# 122 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1004 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                               BinOp (_1, "and", _3) 
                   )
# 123 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1016 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                               BinOp (_1, "or", _3) 
                   )
# 124 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1028 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                               IfThenElse (_2, _4, None) 
                   )
# 126 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1040 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                                               IfThenElse (_2, _4, Some _6) 
                   )
# 127 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1053 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                                               Seq (_1, _3) 
                   )
# 129 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1065 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_app_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                                               IsEmpty (_2) 
                   )
# 132 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                               List (_1, _3) 
                   )
# 133 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1088 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                                                                               Match (_2, _4, _6, _8, _13) 
                   )
# 135 "Parser.fsy"
                 : 'expr_tuple_atom));
# 1103 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                               TyName _1 
                   )
# 139 "Parser.fsy"
                 : 'ty));
# 1114 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                               TyArrow (_1, _3) 
                   )
# 140 "Parser.fsy"
                 : 'ty));
# 1126 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                               TyTuple _1 
                   )
# 141 "Parser.fsy"
                 : 'ty));
# 1137 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                               _2 
                   )
# 142 "Parser.fsy"
                 : 'ty));
# 1148 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                               [_1] 
                   )
# 145 "Parser.fsy"
                 : 'ty_tuple));
# 1159 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty_tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 146 "Parser.fsy"
                 : 'ty_tuple));
# 1171 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                                       [_1] 
                   )
# 149 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 1182 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atom)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_tuple_atoms)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 150 "Parser.fsy"
                 : 'expr_tuple_atoms));
# 1194 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                               [_1] 
                   )
# 153 "Parser.fsy"
                 : 'tuple_decompose_ids));
# 1205 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuple_decompose_ids)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 154 "Parser.fsy"
                 : 'tuple_decompose_ids));
|]
# 1218 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 53;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let interactive lexer lexbuf :  TinyML.Ast.interactive  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let program lexer lexbuf :  TinyML.Ast.expr  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
