%{

open TinyML
open FSharp.Common.Parsing.LexYacc
open TinyML.Ast

let parse_error_rich = Some (fun ctx -> raise (ParseErrorContextException ctx))

%}
 

%token <System.Int32> INT
%token <System.Double> FLOAT
%token <System.Char> CHAR
%token <System.String> STRING ID

%token IF THEN ELSE FUN ARROW LET REC IN
       TRUE FALSE 
       BRA KET 
       PLUS MINUS STAR SLASH PERCENT
       LT GT LEQ GEQ EQ NEQ
       AND OR NOT
       COLON SEMICOLON2 COMMA SEQUENCE
       TO_FLOAT TO_INT
       PLUS_F MINUS_F STAR_F SLASH_F PERCENT_F
       BRASQ KETSQ CHAIN ISEMPTY MATCH WITH VSEP
%token EOF

%nonassoc THEN ELSE
%left COMMA
%right ARROW
%left OR
%left AND 
%left EQ LT GT LEQ GEQ NEQ
%left PLUS MINUS
%left STAR SLASH MOD
%left APP
%left SEQUENCE
%left PLUS_F MINUS_F STAR_F SLASH_F
%nonassoc NOT
%nonassoc UMINUS

%type < TinyML.Ast.expr > program
%type < TinyML.Ast.interactive > interactive

%start program
%start interactive

%%

program:
    expr EOF                           { $1 }

interactive:
    expr SEMICOLON2                     { IExpr $1 }
  | binding SEMICOLON2                  { IBinding $1 }

expr:
    expr_tuple_atom                                     { $1 }
  | BRA expr_tuple_atom COMMA expr_tuple_atoms KET      { Tuple ($2::$4) }


binding:
  | LET ID EQ expr                       { (false, $2, None, $4) }
  | LET ID COLON ty EQ expr              { (false, $2, Some $4, $6) }
  | LET REC ID EQ expr                   { (true, $3, None, $5) }
  | LET REC ID COLON ty EQ expr          { (true, $3, Some $5, $7) }

expr_app_atom:
    INT                                 { Lit (LInt $1) }
  | FLOAT                               { Lit (LFloat $1) }
  | STRING                              { Lit (LString $1) }
  | CHAR                                { Lit (LChar $1) }
  | TRUE                                { Lit (LBool true) }
  | FALSE                               { Lit (LBool false) }
  | BRA KET                             { Lit LUnit }

  | ID                                  { Var $1 }
  
  | BRA expr KET                        { $2 }

  | TO_FLOAT BRA expr KET               { UnOp ("to_float", $3) }
  | TO_INT BRA expr KET                 { UnOp ("to_int", $3) }

  | BRASQ ty KETSQ                      { Empty (Some $2) }
  | BRASQ KETSQ                         { Empty (None) }

expr_tuple_atom:
    expr_app_atom                                       { $1 }
  | expr_tuple_atom expr_app_atom %prec APP             { App ($1, $2) }
  // to apply to a tuple you have to put double parentheses f ((et1,..,etn))

  | FUN ID ARROW expr                                   { Lambda ($2, None, $4) }
  | FUN BRA ID COLON ty KET ARROW expr                  { Lambda ($3, Some $5, $8) }

  | binding IN expr                                             { LetIn ($1, $3) }
  | LET BRA ID COMMA tuple_decompose_ids KET EQ expr IN expr    { LetTuple ($3::$5, $8, $10)}
  
  | NOT expr_tuple_atom                                 { UnOp ("not", $2) }
  | MINUS   expr_tuple_atom %prec UMINUS                { UnOp ("-", $2) }
  | MINUS_F expr_tuple_atom %prec UMINUS                { UnOp ("-.", $2) }
  // I need to distinguish also unary operators for integer and floats,
  // otherwise I was not able to infer the type of: fun x -> -x
  // would it be (float -> float) or (int -> int)

  | expr_tuple_atom PLUS expr_tuple_atom                { BinOp ($1, "+", $3) }
  | expr_tuple_atom PLUS_F expr_tuple_atom              { BinOp ($1, "+.", $3) }
  | expr_tuple_atom MINUS expr_tuple_atom               { BinOp ($1, "-", $3) }
  | expr_tuple_atom MINUS_F expr_tuple_atom             { BinOp ($1, "-.", $3) }
  | expr_tuple_atom STAR expr_tuple_atom                { BinOp ($1, "*", $3) }
  | expr_tuple_atom STAR_F expr_tuple_atom              { BinOp ($1, "*.", $3) }
  | expr_tuple_atom SLASH expr_tuple_atom               { BinOp ($1, "/", $3) }
  | expr_tuple_atom SLASH_F expr_tuple_atom             { BinOp ($1, "/.", $3) }
  | expr_tuple_atom PERCENT expr_tuple_atom             { BinOp ($1, "%", $3) }
  | expr_tuple_atom PERCENT_F expr_tuple_atom           { BinOp ($1, "%.", $3) }

  | expr_tuple_atom EQ expr_tuple_atom                  { BinOp ($1, "=", $3) }
  | expr_tuple_atom NEQ expr_tuple_atom                 { BinOp ($1, "<>", $3) }
  | expr_tuple_atom LT expr_tuple_atom                  { BinOp ($1, "<", $3) }
  | expr_tuple_atom GT expr_tuple_atom                  { BinOp ($1, ">", $3) }
  | expr_tuple_atom LEQ expr_tuple_atom                 { BinOp ($1, "<=", $3) }
  | expr_tuple_atom GEQ expr_tuple_atom                 { BinOp ($1, ">=", $3) }
  | expr_tuple_atom AND expr_tuple_atom                 { BinOp ($1, "and", $3) }
  | expr_tuple_atom OR expr_tuple_atom                  { BinOp ($1, "or", $3) }

  | IF expr THEN expr                                   { IfThenElse ($2, $4, None) }
  | IF expr THEN expr ELSE expr                         { IfThenElse ($2, $4, Some $6) }

  | expr_tuple_atom SEQUENCE expr_tuple_atom            { Seq ($1, $3) }
  // for a tuple in the last expr you have to put double parentheses  e1; e2; ((et1,..,etn))

  // The IsEmpty expression could be implemented as a syntactic sugar of the Match construct
  //| ISEMPTY expr_app_atom                               { Match ($2, "_", "_", Lit (LBool false), Lit (LBool true)) }
  | ISEMPTY expr_app_atom                               { IsEmpty ($2) }
  | expr_tuple_atom CHAIN expr_tuple_atom               { List ($1, $3) }

  | MATCH expr_tuple_atom WITH ID CHAIN ID ARROW expr VSEP BRASQ KETSQ ARROW expr       { Match ($2, $4, $6, $8, $13) }
  

ty:
    ID                                  { TyName $1 }
  | ty ARROW ty                         { TyArrow ($1, $3) }
  | ty_tuple                            { TyTuple $1 }
  | BRA ty KET                          { $2 }

ty_tuple:
    ty                                  { [$1] }
  | ty STAR ty_tuple                    { $1 :: $3 }

expr_tuple_atoms:
    expr_tuple_atom                             { [$1] }
  | expr_tuple_atom COMMA expr_tuple_atoms      { $1 :: $3 }

tuple_decompose_ids:
    ID                                  { [$1] }
  | ID COMMA tuple_decompose_ids        { $1 :: $3 }



